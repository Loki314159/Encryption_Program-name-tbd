import base64 as b64 #base64 version of the encryption W Tkinter.py, may not keep this super updated
code="aW1wb3J0IHRraW50ZXIgYXMgdGsKZnJvbSB0a2ludGVyIGltcG9ydCBtZXNzYWdlYm94CmltcG9ydCBudW1weSBhcyBucAppbXBvcnQgYmFzZTY0IGFzIGI2NAppbXBvcnQgUlNBIGFzIHJzYQppbXBvcnQgTG9naW5TY3JlZW5MaXRlIGFzIGxzCmltcG9ydCBvcwppbXBvcnQgY3VzdG9tdGtpbnRlcgojIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSMKIiIiCiAgICBQdXJwb3NlOiBjbGVhciBvdXQgYWxsIHRoZSBidXR0b25zIGZvciBlYWNoIGVuY3J5cHRpb24gbWV0aG9kCiAgICBSZXF1aXJlbWVudDogYmUgY2FsbGVkCiAgICBQcm9taXNlOiBhbGwgd2lkZ2V0cyBjbGVhcmVkIGJhciBtZXRob2QgYnV0dG9ucyBhbmQgZGV0YWlscyBidXR0b24KIiIiCiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIwpkZWYgZm9yZ2V0QWxsKCk6CiAgICBjaXBoZXJ0ZXh0Qm94LmdyaWRfZm9yZ2V0KCkKICAgIGNpcGhlcnRleHRMYWJlbC5ncmlkX2ZvcmdldCgpCiAgICBwbGFpbnRleHRCb3guZ3JpZF9mb3JnZXQoKQogICAgcGxhaW50ZXh0TGFiZWwuZ3JpZF9mb3JnZXQoKQogICAgZW5jcnlwdEJ1dHRvbi5ncmlkX2ZvcmdldCgpCiAgICBkZWNyeXB0QnV0dG9uLmdyaWRfZm9yZ2V0KCkKICAgIGVuY3J5cHRCdXR0b24uY29uZmlndXJlKHRleHQ9IkVuY3J5cHQ6IikKICAgIGRlY3J5cHRCdXR0b24uY29uZmlndXJlKHRleHQ9IkRlY3J5cHQ6IikKICAgIGtleUJveC5ncmlkX2ZvcmdldCgpCiAgICBrZXlMYWJlbC5ncmlkX2ZvcmdldCgpCiAgICBzaGlmdEJveC5ncmlkX2ZvcmdldCgpCiAgICBzaGlmdExhYmVsLmdyaWRfZm9yZ2V0KCkKICAgIHB1YmxpY0tleUJveC5ncmlkX2ZvcmdldCgpCiAgICBwdWJsaWNLZXlMYWJlbC5ncmlkX2ZvcmdldCgpCiAgICBwcml2YXRlS2V5Qm94LmdyaWRfZm9yZ2V0KCkKICAgIHByaXZhdGVLZXlMYWJlbC5ncmlkX2ZvcmdldCgpCiAgICBjaGFuZ2VQYXNzd29yZEJ1dHRvbi5ncmlkX2ZvcmdldCgpCiAgICBjaGFuZ2VVc2VybmFtZUJ1dHRvbi5ncmlkX2ZvcmdldCgpCiAgICBuZXdVc2VyQnV0dG9uLmdyaWRfZm9yZ2V0KCkKICAgIHVzZXJuYW1lQm94LmdyaWRfZm9yZ2V0KCkKICAgIHVzZXJuYW1lTGFiZWwuZ3JpZF9mb3JnZXQoKQogICAgcGFzc3dvcmRCb3guZ3JpZF9mb3JnZXQoKQogICAgcGFzc3dvcmRMYWJlbC5ncmlkX2ZvcmdldCgpCiAgICB1aWRCb3guZ3JpZF9mb3JnZXQoKQogICAgdWlkTGFiZWwuZ3JpZF9mb3JnZXQoKQogICAgcmVtb3ZlVXNlckJ1dHRvbi5ncmlkX2ZvcmdldCgpCiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIwoiIiIKICAgIFB1cnBvc2U6IG1ha2UgYWxsIGJ1dHRvbnMgbGlnaHQgYmx1ZSB0byBhbGxvdyB0aGUgZm9jdXNlZCBtZXRob2QgYmUgdHVybmVkIGRhcmsgYmx1ZSBhbmQgZm9jdXNlZAogICAgUmVxdWlyZW1lbnQ6IGJlIGNhbGxlZAogICAgUHJvbWlzZTogYWxsIGJ1dHRvbnMgd2lsbCBiZSB0dXJuZWQgbGlnaHQgYmx1ZQoiIiIKIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0jCmRlZiBibHVlQnV0dG9ucygpOgogICAgdHJpZmlkQnV0dG9uLmNvbmZpZ3VyZShmZ19jb2xvcj0iIzNmNTc5OSIsIHRleHRfY29sb3I9ImJsYWNrIikKICAgIGNhZXNhckJ1dHRvbi5jb25maWd1cmUoZmdfY29sb3I9IiMzZjU3OTkiLCB0ZXh0X2NvbG9yPSJibGFjayIpCiAgICBSU0FCdXR0b24uY29uZmlndXJlKGZnX2NvbG9yPSIjM2Y1Nzk5IiwgdGV4dF9jb2xvcj0iYmxhY2siKQogICAgYjY0QnV0dG9uLmNvbmZpZ3VyZShmZ19jb2xvcj0iIzNmNTc5OSIsIHRleHRfY29sb3I9ImJsYWNrIikKICAgIHN1YnN0aXR1dGlvbkJ1dHRvbi5jb25maWd1cmUoZmdfY29sb3I9IiMzZjU3OTkiLCB0ZXh0X2NvbG9yPSJibGFjayIpCiAgICBjaGFuZ2VEZXRhaWxzQnV0dG9uLmNvbmZpZ3VyZShmZ19jb2xvcj0iIzNmNTc5OSIsIHRleHRfY29sb3I9ImJsYWNrIikKIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0jCiIiIgogICAgUHVycG9zZTogR2VuZXJhdGUgUlNBIGtleXMgdXNpbmcgUlNBLnB5IHByb3ZpZGVkIGluIGFzc2Vzc21lbnQgZmlsZXMKICAgIFJlcXVpcmVtZW50OiBiZSBjYWxsZWQgd2hpbGUgZW5jcnlwdGluZy9kZWNyeXB0aW5nCiAgICBQcm9taXNlOiBnZW5lcmF0ZSBSU0Ega2V5cyBpZiB0aGVyZSBhcmVuJ3QgYW55IGN1cnJlbnRseQoiIiIKIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0jCmRlZiBSU0FHZW5LZXlzKCk6CiAgICBpZiBwcml2YXRlS2V5Qm94LmdldCgpIGFuZCBwdWJsaWNLZXlCb3guZ2V0KCk6CiAgICAgICAgcmV0dXJuIHByaXZhdGVLZXlCb3guZ2V0KCksIHB1YmxpY0tleUJveC5nZXQoKQogICAgcHJpdmF0ZUtleSwgcHVibGljS2V5ID0gcnNhLm1ha2VSU0FLZXkoKQogICAgcHJpdmF0ZUtleUJveC5kZWxldGUoMCwgY3VzdG9tdGtpbnRlci5DVGtFTkQpIyB0aGlzIHdpbGwgZGVsZXRlIGV2ZXJ5dGhpbmcgaW4gdGhlIEVudHJ5IGJveCBmcm9tIHRoZSBzdGFydCAoMCkgdG8gdGhlIGVuZCAoY3VzdG9tdGtpbnRlci5DVGtFTkQpCiAgICBwcml2YXRlS2V5Qm94Lmluc2VydCgwLCBwcml2YXRlS2V5KSMgdGhpcyB3aWxsIHBsYWNlIHRoZSBwcml2YXRlS2V5IGluIHRoZSBwcml2YXRla2V5Ym94IGF0IHRoZSBzdGFydCAoMCkKICAgIHB1YmxpY0tleUJveC5kZWxldGUoMCwgY3VzdG9tdGtpbnRlci5DVGtFTkQpCiAgICBwdWJsaWNLZXlCb3guaW5zZXJ0KDAsIHB1YmxpY0tleSkKICAgIHJldHVybiBwcml2YXRlS2V5LCBwdWJsaWNLZXkgIyByZXR1cm5zIGJvdGgga2V5cyB0byB0aGUgb3BlcmF0aW9uIHRoYXQgY2FsbGVkIHRoZSBmdW5jdGlvbgojIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSMKIiIiCiAgICBQdXJwb3NlOiBSZW1vdmUgdGhlIG5ld2xpbmUgY2hhcmFjdGVyIGF0IHRoZSBlbmQgb2YgYW4gaW5wdXQgcGFyc2VkIHRocm91Z2ggYSBUZXh0IHdpZGdldCwgdGhpcyBpcyBub3QgbmVlZGVkIGZvciB1c2VyIGlucHV0cyBmcm9tIEVudHJ5IHdpZGdldHMKICAgIFJlcXVpcmVtZW50OiBiZSBjYWxsZWQgYWZ0ZXIgcGFyc2luZyBpbnB1dCBmcm9tIGFuIEVudHJ5IHdpZGdldAogICAgUHJvbWlzZTogcmVtb3ZlIHRoZSB1bm5lY2Vzc2FyeSAoc29tZXRpbWVzIHByb2JsZW1hdGljKSBuZXdsaW5lIGNoYXJhY3RlciBmcm9tIGlucHV0cwoiIiIKIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0jCmRlZiBUZXh0Ym94Zm9ybWF0dGVyKHRleHQpOgogICAgYWx0ZXJlZFRleHRMaXN0PWxpc3QodGV4dCkgIyB0dXJuIHRoZSB0ZXN0IGludG8gYSBsaXN0CiAgICBhbHRlcmVkVGV4dExpc3QucG9wKC0xKSAjIHJlbW92ZSB0aGUgZmluYWwgY2hhcmFjdGVyICh3aGljaCB3aWxsIGFsd2F5cyBiZSBhIG5ld2xpbmUpCiAgICBhbHRlcmVkVGV4dD0iIi5qb2luKGFsdGVyZWRUZXh0TGlzdCkgIyBwdXQgdGhlIGxpc3QgYmFjayBpbnRvIGJlaW5nIGEgc3RyaW5nCiAgICByZXR1cm4gYWx0ZXJlZFRleHQKIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0jCiIiIgogICAgUHVycG9zZTogc2V0IHdpZGdldHMgdG8gYmUgZm9yIHRoZSB0cmlmaWQgbWV0aG9kCiAgICBSZXF1aXJlbWVudDogVHJpZmlkIGJ1dHRvbiBwcmVzc2VkCiAgICBQcm9taXNlOiBpbml0aWFsaXNlIHRyaWZpZCBhbmQgY29tbW9uIHdpZGdldHMKIiIiCiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIwpkZWYgdHJpZmlkKCk6CiAgICBmb3JnZXRBbGwoKQogICAgYmx1ZUJ1dHRvbnMoKQogICAgdHJpZmlkQnV0dG9uLmNvbmZpZ3VyZShmZ19jb2xvcj0iIzNmNTc5OSIsIHRleHRfY29sb3I9IndoaXRlIikKICAgIGRlY3J5cHRCdXR0b24uY29uZmlndXJlKGNvbW1hbmQ9Y2FsbFRyaWZpZERlY3J5cHQpCiAgICBlbmNyeXB0QnV0dG9uLmNvbmZpZ3VyZShjb21tYW5kPWNhbGxUcmlmaWRFbmNyeXB0KSMgY2hhbmdlcyB0aGUgY29uZmlndXJhdGlvbiBvZiB0aGUgYnV0dG9uIHNvIHRoYXQgaXQgY2FsbHMgdGhlIHNwZWNpZmllZCBjb21tYW5kCiAgICBrZXlMYWJlbC5ncmlkKGNvbHVtbj0xLCByb3c9Miwgc3RpY2t5PSJudyIpCiAgICBrZXlCb3guZ3JpZChjb2x1bW49MSwgcm93PTIsIHN0aWNreT0id2UiKQogICAgZW5jcnlwdEJ1dHRvbi5ncmlkKGNvbHVtbj0xLCByb3c9MSwgc3RpY2t5PSJzIikgIyBwbGFjZXMgdGhlIHdpZGdldCBpbiB0aGUgc3BlY2lmaWVkIGNvbHVtbiBhbmQgcm93IHdoZXJlIGl0IHdpbGwgYmUgYWxsaWduZWQgdG8gdGhlIGNhcmRpbmFsIGRpcmVjdGlvbiBzcGVjaWZpZWQKICAgIGRlY3J5cHRCdXR0b24uZ3JpZChjb2x1bW49MSwgcm93PTMsIHN0aWNreT0ibiIpCiAgICBjaXBoZXJ0ZXh0Qm94LmdyaWQoY29sdW1uPTEsIHJvdz00KSAjIGR1ZSB0byBsYWNrIG9mIHN0aWNreSBpdCB3aWxsIGJlIGluIHRoZSBjZW50cmUKICAgIGNpcGhlcnRleHRMYWJlbC5ncmlkKGNvbHVtbj0xLCByb3c9NCwgc3RpY2t5PSJudyIpCiAgICBwbGFpbnRleHRCb3guZ3JpZChjb2x1bW49MSwgcm93PTApCiAgICBwbGFpbnRleHRMYWJlbC5ncmlkKGNvbHVtbj0xLCByb3c9MCwgc3RpY2t5PSJudyIpCiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIwoiIiIKICAgIFB1cnBvc2U6IHNldCB3aWRnZXRzIHRvIGJlIGZvciB0aGUgY2Flc2FyIG1ldGhvZAogICAgUmVxdWlyZW1lbnQ6IENhZXNhciBidXR0b24gcHJlc3NlZAogICAgUHJvbWlzZTogaW5pdGlhbGlzZSBjYWVzYXIgYW5kIGNvbW1vbiB3aWRnZXRzCiIiIgojIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSMKZGVmIGNhZXNhcigpOgogICAgZm9yZ2V0QWxsKCkKICAgIGJsdWVCdXR0b25zKCkKICAgIGNhZXNhckJ1dHRvbi5jb25maWd1cmUoZmdfY29sb3I9IiMzZjU3OTkiLCB0ZXh0X2NvbG9yPSJ3aGl0ZSIpCiAgICBkZWNyeXB0QnV0dG9uLmNvbmZpZ3VyZShjb21tYW5kPWNhbGxDYWVzYXJEZWNyeXB0KQogICAgZW5jcnlwdEJ1dHRvbi5jb25maWd1cmUoY29tbWFuZD1jYWxsQ2Flc2FyRW5jcnlwdCkKICAgIHNoaWZ0Qm94LmdyaWQoY29sdW1uPTEsIHJvdz0yKQogICAgc2hpZnRMYWJlbC5ncmlkKGNvbHVtbj0xLCByb3c9Miwgc3RpY2t5PSJudyIpCiAgICBlbmNyeXB0QnV0dG9uLmdyaWQoY29sdW1uPTEsIHJvdz0xLCBzdGlja3k9InMiKQogICAgZGVjcnlwdEJ1dHRvbi5ncmlkKGNvbHVtbj0xLCByb3c9Mywgc3RpY2t5PSJuIikKICAgIGNpcGhlcnRleHRCb3guZ3JpZChjb2x1bW49MSwgcm93PTQpCiAgICBjaXBoZXJ0ZXh0TGFiZWwuZ3JpZChjb2x1bW49MSwgcm93PTQsIHN0aWNreT0ibnciKQogICAgcGxhaW50ZXh0Qm94LmdyaWQoY29sdW1uPTEsIHJvdz0wKQogICAgcGxhaW50ZXh0TGFiZWwuZ3JpZChjb2x1bW49MSwgcm93PTAsIHN0aWNreT0ibnciKQojIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSMKIiIiCiAgICBQdXJwb3NlOiBzZXQgd2lkZ2V0cyB0byBiZSBmb3IgdGhlIFJTQSBtZXRob2QKICAgIFJlcXVpcmVtZW50OiBSU0EgYnV0dG9uIHByZXNzZWQKICAgIFByb21pc2U6IGluaXRpYWxpc2UgUlNBIGFuZCBjb21tb24gd2lkZ2V0cwoiIiIKIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0jCmRlZiBSU0EoKToKICAgIGZvcmdldEFsbCgpCiAgICBibHVlQnV0dG9ucygpCiAgICBSU0FCdXR0b24uY29uZmlndXJlKGZnX2NvbG9yPSIjM2Y1Nzk5IiwgdGV4dF9jb2xvcj0id2hpdGUiKQogICAgZGVjcnlwdEJ1dHRvbi5jb25maWd1cmUoY29tbWFuZD1jYWxsUlNBUHJpdkRlY3J5cHQsIHRleHQ9IlByaXYgRGVjcnlwdCIpCiAgICBlbmNyeXB0QnV0dG9uLmNvbmZpZ3VyZShjb21tYW5kPWNhbGxSU0FQdWJFbmNyeXB0LCB0ZXh0PSJQdWIgRW5jcnlwdCIpCiAgICBkZWNyeXB0QnV0dG9uLmdyaWQoY29sdW1uPTEsIHJvdz0yLCBzdGlja3k9InMiKQogICAgZW5jcnlwdEJ1dHRvbi5ncmlkKGNvbHVtbj0xLCByb3c9Miwgc3RpY2t5PSJuIikKICAgIHB1YmxpY0tleUJveC5ncmlkKGNvbHVtbj0xLCByb3c9MSkKICAgIHB1YmxpY0tleUxhYmVsLmdyaWQoY29sdW1uPTEsIHJvdz0xLCBzdGlja3k9Im53IikKICAgIHByaXZhdGVLZXlCb3guZ3JpZChjb2x1bW49MSwgcm93PTMpCiAgICBwcml2YXRlS2V5TGFiZWwuZ3JpZChjb2x1bW49MSwgcm93PTMsIHN0aWNreT0ibnciKQogICAgY2lwaGVydGV4dEJveC5ncmlkKGNvbHVtbj0xLCByb3c9NCkKICAgIGNpcGhlcnRleHRMYWJlbC5ncmlkKGNvbHVtbj0xLCByb3c9NCwgc3RpY2t5PSJudyIpCiAgICBwbGFpbnRleHRCb3guZ3JpZChjb2x1bW49MSwgcm93PTApCiAgICBwbGFpbnRleHRMYWJlbC5ncmlkKGNvbHVtbj0xLCByb3c9MCwgc3RpY2t5PSJudyIpCiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIwoiIiIKICAgIFB1cnBvc2U6IHNldCB3aWRnZXRzIHRvIGJlIGZvciB0aGUgYmFzZTY0IG1ldGhvZAogICAgUmVxdWlyZW1lbnQ6IGJhc2U2NCBidXR0b24gcHJlc3NlZAogICAgUHJvbWlzZTogaW5pdGlhbGlzZSBiYXNlNjQgYW5kIGNvbW1vbiB3aWRnZXRzCiIiIgojIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSMKZGVmIGJhc2U2NCgpOgogICAgZm9yZ2V0QWxsKCkKICAgIGJsdWVCdXR0b25zKCkKICAgIGI2NEJ1dHRvbi5jb25maWd1cmUoZmdfY29sb3I9IiMzZjU3OTkiLCB0ZXh0X2NvbG9yPSJ3aGl0ZSIpCiAgICBkZWNyeXB0QnV0dG9uLmNvbmZpZ3VyZShjb21tYW5kPWNhbGxCYXNlNjREZWNyeXB0KQogICAgZW5jcnlwdEJ1dHRvbi5jb25maWd1cmUoY29tbWFuZD1jYWxsQmFzZTY0RW5jcnlwdCkKICAgIGVuY3J5cHRCdXR0b24uZ3JpZChjb2x1bW49MSwgcm93PTEsIHN0aWNreT0icyIpCiAgICBkZWNyeXB0QnV0dG9uLmdyaWQoY29sdW1uPTEsIHJvdz0zLCBzdGlja3k9Im4iKQogICAgY2lwaGVydGV4dEJveC5ncmlkKGNvbHVtbj0xLCByb3c9NCkKICAgIGNpcGhlcnRleHRMYWJlbC5ncmlkKGNvbHVtbj0xLCByb3c9NCwgc3RpY2t5PSJudyIpCiAgICBwbGFpbnRleHRCb3guZ3JpZChjb2x1bW49MSwgcm93PTApCiAgICBwbGFpbnRleHRMYWJlbC5ncmlkKGNvbHVtbj0xLCByb3c9MCwgc3RpY2t5PSJudyIpCiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIwoiIiIKICAgIFB1cnBvc2U6IHNldCB3aWRnZXRzIHRvIGJlIGZvciB0aGUgc3Vic3RpdHV0aW9uIG1ldGhvZAogICAgUmVxdWlyZW1lbnQ6IFN1YnN0aXR1dGlvbiBidXR0b24gcHJlc3NlZAogICAgUHJvbWlzZTogaW5pdGlhbGlzZSBzdWJzdGl0dXRpb24gYW5kIGNvbW1vbiB3aWRnZXRzCiIiIgojIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSMKZGVmIHN1YnN0aXR1dGlvbigpOgogICAgZm9yZ2V0QWxsKCkKICAgIGJsdWVCdXR0b25zKCkKICAgIHN1YnN0aXR1dGlvbkJ1dHRvbi5jb25maWd1cmUoZmdfY29sb3I9IiMzZjU3OTkiLCB0ZXh0X2NvbG9yPSJ3aGl0ZSIpCiAgICBkZWNyeXB0QnV0dG9uLmNvbmZpZ3VyZShjb21tYW5kPWNhbGxTdWJzdGl0dXRpb25EZWNyeXB0KQogICAgZW5jcnlwdEJ1dHRvbi5jb25maWd1cmUoY29tbWFuZD1jYWxsU3Vic3RpdHV0aW9uRW5jcnlwdCkKICAgIGVuY3J5cHRCdXR0b24uZ3JpZChjb2x1bW49MSwgcm93PTEsIHN0aWNreT0icyIpCiAgICBkZWNyeXB0QnV0dG9uLmdyaWQoY29sdW1uPTEsIHJvdz0zLCBzdGlja3k9Im4iKQogICAgY2lwaGVydGV4dEJveC5ncmlkKGNvbHVtbj0xLCByb3c9NCkKICAgIGNpcGhlcnRleHRMYWJlbC5ncmlkKGNvbHVtbj0xLCByb3c9NCwgc3RpY2t5PSJudyIpCiAgICBwbGFpbnRleHRCb3guZ3JpZChjb2x1bW49MSwgcm93PTApCiAgICBwbGFpbnRleHRMYWJlbC5ncmlkKGNvbHVtbj0xLCByb3c9MCwgc3RpY2t5PSJudyIpCiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIwoiIiIKICAgIFB1cnBvc2U6IHNldCB3aWRnZXRzIGZvciB1c2VyIG1hbmFnZW1lbnQKICAgIFJlcXVpcmVtZW50OiBkZXRhaWxzIGJ1dHRvbiBwcmVzc2VkCiAgICBQcm9taXNlOiBpbml0aWFsaXNlIGRldGFpbHMgYW5kIGNvbW1vbiB3aWRnZXRzCiIiIgojIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSMKZGVmIGNoYW5nZURldGFpbHMoKToKICAgIGZvcmdldEFsbCgpCiAgICBibHVlQnV0dG9ucygpCiAgICBjaGFuZ2VEZXRhaWxzQnV0dG9uLmNvbmZpZ3VyZShmZ19jb2xvcj0iIzNmNTc5OSIsIHRleHRfY29sb3I9IndoaXRlIikKICAgIHVzZXJuYW1lQm94LmdyaWQoY29sdW1uPTEsIHJvdz0wKQogICAgdXNlcm5hbWVMYWJlbC5ncmlkKGNvbHVtbj0xLCByb3c9MCwgc3RpY2t5PSJudyIpCiAgICBwYXNzd29yZEJveC5ncmlkKGNvbHVtbj0xLCByb3c9MSkKICAgIHBhc3N3b3JkTGFiZWwuZ3JpZChjb2x1bW49MSwgcm93PTEsIHN0aWNreT0ibnciKQogICAgdWlkQm94LmdyaWQoY29sdW1uPTEsIHJvdz0yKQogICAgdWlkTGFiZWwuZ3JpZChjb2x1bW49MSwgcm93PTIsIHN0aWNreT0ibnciKQogICAgCiAgICBjaGFuZ2VQYXNzd29yZEJ1dHRvbi5ncmlkKGNvbHVtbj0iMSIsIHJvdz0iMyIsIHN0aWNreT0ibiIpCiAgICBjaGFuZ2VVc2VybmFtZUJ1dHRvbi5ncmlkKGNvbHVtbj0iMSIsIHJvdz0iMyIsIHN0aWNreT0icyIpCiAgICBuZXdVc2VyQnV0dG9uLmdyaWQoY29sdW1uPSIxIiwgcm93PSI0Iiwgc3RpY2t5PSJuIikKICAgIHJlbW92ZVVzZXJCdXR0b24uZ3JpZChjb2x1bW49IjEiLCByb3c9IjQiLCBzdGlja3k9InMiKQoKZGVmIGVuY3J5cHRDcmVkc0ZpbGUoKToKICAgIGNyZWRlbnRpYWxzRmlsZSA9IG9wZW4oImNyZWRlbnRpYWxzLnR4dCIsICJyIikKICAgIG5ld0NyZWRlbnRpYWxzRmlsZSA9IG9wZW4oIm5ld2NyZWRlbnRpYWxzLnR4dCIsICJ3IikKCiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIwoiIiIKICAgIFB1cnBvc2U6IEVuY3J5cHQgcGxhaW50ZXh0IHdpdGggdHJpZmlkIG1ldGhvZAogICAgUmVxdWlyZW1lbnQ6IEVuY3J5cHQgYnV0dG9uIGJlIHByZXNzZWQsIHRoZXJlIGlzIGEgcGxhaW50ZXh0IHRvIGVuY3J5cHQsIGtleSBpcyAxMjUgY2hhcmFjdGVycyBhbmQgYWxsIGNoYXJhY3RlcnMgaW4gdGhlIHBsYWludGV4dCBhcmUgYWxzbyBpbiB0aGUga2V5CiAgICBQcm9taXNlOiBwbGFjZSBlbmNyeXB0ZWQgcGxhaW50ZXh0IGluIGNpcGhlcnRleHQgYm94CiIiIgojIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSMKZGVmIGNhbGxUcmlmaWRFbmNyeXB0KCk6ICMgISIjJCUmJygpKissLS4vMDEyMzQ1Njc4OTo7PD0+P0BBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWltcXV5fYGFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6e3x9fsKhwqLCo8KkwqXCpsKnwqjCqcKqwqvCrMKvwrDCscKyw57CtcK2wrfFk8K5wrrCu8K84oCUwr3Cv8i94pmlCiAgICBjaXBoZXJ0ZXh0PSIiICAgIyBleGFtcGxlIGtleV5eXgogICAgcGxhaW50ZXh0PVRleHRib3hmb3JtYXR0ZXIocGxhaW50ZXh0Qm94LmdldCgiMC4wIiwgImVuZCIpKSAjIGdldHMgdGhlIHRleHQgZnJvbSB0aGUgcGxhaW50ZXh0IFRleHQgZmllbGQgYmVmb3JlIHJlbW92aW5nIHRoZSB1bm5lY2Vzc2FyeSBuZXdsaW5lIGNoYXJhY3RlciB0byBhdm9pZCBpbmNvcnJlY3QgZW5jcnlwdGlvbgogICAga2V5PWtleUJveC5nZXQoKQogICAgY2lwaGVydGV4dCA9IHRyaWZpZEVuY3J5cHQoa2V5LCBwbGFpbnRleHQpCiAgICBjaXBoZXJ0ZXh0Qm94LmRlbGV0ZSgiMC4wIiwgImVuZCIpICMgdGhlIGZvcm1hdHRpbmcgdG8gZGVsZXRlIHRoaW5ncyBmcm9tIFRleHQgd2lkZ2V0cyBpcyBzbGlnaHRseSBkaWZmZXJlbnQgdG8gRW50cnkgd2lkZ2V0cyBhcyBzaG93biBwcmV2aW91c2x5LCB0aGlzIGRlbGV0ZXMgZXZlcnl0aGluZyBpbiBpdAogICAgY2lwaGVydGV4dEJveC5pbnNlcnQoIjAuMCIsIGNpcGhlcnRleHQpICMgc2ltaWxhciBkaWZmZXJlbmNlIGhlcmUsIGp1c3QgaW5zZXJ0cyBjaXBoZXJ0ZXh0CgpkZWYgdHJpZmlkRW5jcnlwdChrZXksIHBsYWludGV4dCk6CiAgICBwbGFpbkxpc3Q9bGlzdChwbGFpbnRleHQpCiAgICBrZXlMaXN0PWxpc3Qoa2V5LnJlcGxhY2UoIuKZpSIsIlxuIikpICNhbGxvd3Mga2V5cyB0byBoYXZlIOKZpSBpbnN0ZWFkIG9mIG5ld2xpbmUgY2hhcmFjdGVyLCBwdXJlbHkgYSBjb3NtZXRpYyBjaG9pY2UKICAgIHRyeToKICAgICAgICBjaXBoZXJLZXk9bnAucmVzaGFwZShrZXlMaXN0LCg1LDUsNSkpI3Jlc2hhcGUga2V5IGludG8ga2V5IGN1YmUgCiAgICAgICAgeENvb3JkaW5hdGUgPSBbXQogICAgICAgIHlDb29yZGluYXRlID0gW10KICAgICAgICB6Q29vcmRpbmF0ZSA9IFtdCiAgICAgICAgZm9yIGkgaW4gcGxhaW5MaXN0OgogICAgICAgICAgICBmb3IgeCBpbiByYW5nZSg1KToKICAgICAgICAgICAgICAgIGZvciB5IGluIHJhbmdlKDUpOgogICAgICAgICAgICAgICAgICAgIGZvciB6IGluIHJhbmdlKDUpOgogICAgICAgICAgICAgICAgICAgICAgICBpZiBjaXBoZXJLZXlbeF1beV1bel0gPT0gaTogI3R1cm4gcGxhaW50ZXh0IGludG8gY29vcmRpbmF0ZXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhDb29yZGluYXRlLmFwcGVuZCh4KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgeUNvb3JkaW5hdGUuYXBwZW5kKHkpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB6Q29vcmRpbmF0ZS5hcHBlbmQoeikKICAgICAgICBjaXBoZXJMaXN0PVtdCiAgICAgICAgZm9yIGkgaW4gcmFuZ2UobGVuKHBsYWluTGlzdCkpOgogICAgICAgICAgICBjaXBoZXJMaXN0LmFwcGVuZChjaXBoZXJLZXlbeENvb3JkaW5hdGVbaV1dW3lDb29yZGluYXRlW2ktMV1dW3pDb29yZGluYXRlW2ktMl1dKSAjc2hpZnQgY29vcmRpbmF0ZXMgYW5kIHdyaXRlIG91dCB0aGUgY2lwaGVydGV4dAogICAgICAgIGNpcGhlcnRleHQ9IiIuam9pbihjaXBoZXJMaXN0KQogICAgZXhjZXB0IFZhbHVlRXJyb3I6CiAgICAgICAgbWVzc2FnZWJveC5zaG93d2FybmluZygiVmFsdWUgRXJyb3IiLCJLZXkgdG9vIGxhcmdlIG9yIHRvbyBzbWFsbCIpCiAgICBleGNlcHQgSW5kZXhFcnJvcjoKICAgICAgICBtZXNzYWdlYm94LnNob3d3YXJuaW5nKCJJbmRleCBFcnJvciIsIkNoYXJhY3RlciBpbiBwbGFpbnRleHQgdGhhdCBpcyBub3QgaW4gdGhlIGtleSIpCiAgICByZXR1cm4gY2lwaGVydGV4dAojIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSMKIiIiCiAgICBQdXJwb3NlOiBFbmNyeXB0IHBsYWludGV4dCB3aXRoIGNhZXNhciBtZXRob2QKICAgIFJlcXVpcmVtZW50OiBFbmNyeXB0IGJ1dHRvbiBiZSBwcmVzc2VkLCB0aGVyZSBpcyBhIHBsYWludGV4dCB0byBlbmNyeXB0LCBzaGlmdCBpcyBub3QgbnVsbAogICAgUHJvbWlzZTogcGxhY2UgZW5jcnlwdGVkIHBsYWludGV4dCBpbiBjaXBoZXJ0ZXh0IGJveAoiIiIKIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0jCmRlZiBjYWxsQ2Flc2FyRW5jcnlwdCgpOgogICAgc2hpZnQ9aW50KHNoaWZ0Qm94LmdldCgpKSAjZ3JhYiBrZXkgYW5kIG1ha2Ugc3VyZSBJIGNhbiBkbyBtYXRoIHdpdGggaXQKICAgIHBsYWludGV4dD1UZXh0Ym94Zm9ybWF0dGVyKHBsYWludGV4dEJveC5nZXQoIjAuMCIsICJlbmQiKSkKICAgIGNpcGhlcnRleHQ9Y2Flc2FyRW5jcnlwdChzaGlmdCwgcGxhaW50ZXh0KQogICAgY2lwaGVydGV4dEJveC5kZWxldGUoIjAuMCIsICJlbmQiKQogICAgY2lwaGVydGV4dEJveC5pbnNlcnQoIjAuMCIsIGNpcGhlcnRleHQpCgpkZWYgY2Flc2FyRW5jcnlwdChzaGlmdCwgcGxhaW50ZXh0KToKICAgIGNpcGhlcnRleHQ9IiIKICAgIHBsYWluTnVtYmVycz1bXQogICAgYXNjaWlMaXN0PWxpc3QoJycnICEiIyQlJicoKSorLC0uLzAxMjM0NTY3ODk6Ozw9Pj9AQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVpbXFxdXl9gYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXp7fH1+wqHCosKjwqTCpcKmwqfCqMKpwqrCq8Kswq/CsMKxwrLDnsK1wrbCt8WTwrnCusK7wrzKp8K9wr/IvVxuJycnKQogICAgZm9yIGkgaW4gcGxhaW50ZXh0OgogICAgICAgIHBsYWluTnVtYmVycy5hcHBlbmQoYXNjaWlMaXN0LmluZGV4KGkpKSAjdXNpbmcgdGhlIGxpc3QgSSBwcm92aWRlLCBzaGlmdCB0aGUgbGV0dGVycyBhcm91bmQsIHRoaXMgbGlzdCBjYW4gYmUgY29uZmlndXJlZCBhdCB3aWxsCiAgICBjaXBoZXJOdW1iZXJzID0gW3grc2hpZnQgZm9yIHggaW4gcGxhaW5OdW1iZXJzXSAjYWRkIHNoaWZ0IHRvIGFsbCBjaGFyYWN0ZXJzIGluIHBsYWludGV4dAogICAgZm9yIGkgaW4gY2lwaGVyTnVtYmVyczoKICAgICAgICBjaXBoZXJ0ZXh0Kz1hc2NpaUxpc3RbaSVsZW4oYXNjaWlMaXN0KV0gI3N3YXBzIG91dCB0aGUgbnVtYmVycyBmb3IgdGhlaXIgcmVzcGVjdGl2ZSBjaGFyYWN0ZXIgZm91bmQgaW4gdGhlIGFzY2lpbGlzdCAodGhlIG1vZCBvcGVyYXRvciBwcmV2ZW50cyBvdXQgb2YgYm91bmQgcmVxdWVzdHMpCiAgICByZXR1cm4gY2lwaGVydGV4dAojIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSMKIiIiCiAgICBQdXJwb3NlOiBFbmNyeXB0IHBsYWludGV4dCB3aXRoIFJTQSBtZXRob2QgdXNpbmcgdGhlIHB1YmxpYyBrZXkKICAgIFJlcXVpcmVtZW50OiBFbmNyeXB0IGJ1dHRvbiBiZSBwcmVzc2VkLCB0aGVyZSBpcyBhIHBsYWludGV4dCB0byBlbmNyeXB0CiAgICBQcm9taXNlOiBwbGFjZSBlbmNyeXB0ZWQgcGxhaW50ZXh0IGluIGNpcGhlcnRleHQgYm94CiIiIgojIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSMKZGVmIGNhbGxSU0FQdWJFbmNyeXB0KCk6CiAgICBwcml2YXRlS2V5LCBwdWJsaWNLZXkgPSBSU0FHZW5LZXlzKCkKICAgIHBsYWludGV4dD1UZXh0Ym94Zm9ybWF0dGVyKHBsYWludGV4dEJveC5nZXQoIjAuMCIsICJlbmQiKSkKICAgIGNpcGhlcnRleHQgPSBSU0FQdWJFbmNyeXB0KHB1YmxpY0tleSwgcGxhaW50ZXh0KQogICAgY2lwaGVydGV4dEJveC5kZWxldGUoIjAuMCIsICJlbmQiKQogICAgY2lwaGVydGV4dEJveC5pbnNlcnQoIjAuMCIsIGNpcGhlcnRleHQpCgpkZWYgUlNBUHViRW5jcnlwdChwdWJsaWNLZXksIHBsYWludGV4dCk6CiAgICBibG9ja1NpemUgPSAyMDAgIyBzcGVjaWZpZXMgaG93IGxhcmdlIGEgdGV4dCBjYW4gYmUgaW4gY2hhcmFjdGVycyBiZWZvcmUgaXQgd2lsbCBiZSBzcGxpdCBpbnRvIGFub3RoZXIgY2h1bmsKICAgIGNpcGhlcnRleHQ9IiIKICAgIHNwbGl0UGxhaW50ZXh0ID0gW3BsYWludGV4dFtpOmkrYmxvY2tTaXplXSBmb3IgaSBpbiByYW5nZSgwLCBsZW4ocGxhaW50ZXh0KSwgYmxvY2tTaXplKV0gI2h0dHBzOi8vd3d3LmdlZWtzZm9yZ2Vla3Mub3JnL3B5dGhvbi1kaXZpZGUtc3RyaW5nLWludG8tZXF1YWwtay1jaHVua3MvCiAgICAjXiB0aGlzIGFsbG93cyBSU0EgdG8gYmUgcGVyZm9ybWVkIG9uIHRleHQgb2YgYW55IGxlbmd0aCBnaXZlbiB0aGUgdmFsaWQgY2hhcmFjdGVycyBzaXplcywgYWZ0ZXIgdGVzdGluZyBpdCBicm9rZSB3aXRoIDIxNCBieXRlcyBvZiB0ZXh0IGFuZCBub3Qgd2l0aCAyMTMsIGFsbCB2YWxpZCBjaGFyYWN0ZXJzIGFyZSAxIGJ5dGUgc28ganVzdCBjaGFycyA9IGJ5dGVzIGFuZCAyMDAgc2VlbXMgZmluZQogICAgZm9yIGkgaW4gc3BsaXRQbGFpbnRleHQ6CiAgICAgICAgY2lwaGVydGV4dCs9IHJzYS5lbmNyeXB0UlNBKGksIHB1YmxpY0tleSkgKyAi4pml4pml4pml4pml4pmlIiAjdXNpbmcgaGVhcnRzIGFzIGEgZGVsaW5lYXRvciBiZWNhdXNlIGl0IHdpbGwgbm90IGFwcGVhciBpbiBlbmNyeXB0ZWQgUlNBIGV2ZXIKICAgIHJldHVybiBjaXBoZXJ0ZXh0CiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIwoiIiIKICAgIFB1cnBvc2U6IEVuY3J5cHQgcGxhaW50ZXh0IHdpdGggYmFzZSA2NCBtZXRob2QKICAgIFJlcXVpcmVtZW50OiBFbmNyeXB0IGJ1dHRvbiBiZSBwcmVzc2VkLCB0aGVyZSBpcyBhIHBsYWludGV4dCB0byBlbmNyeXB0CiAgICBQcm9taXNlOiBwbGFjZSBlbmNyeXB0ZWQgcGxhaW50ZXh0IGluIGNpcGhlcnRleHQgYm94CiIiIgojIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSMKZGVmIGNhbGxCYXNlNjRFbmNyeXB0KCk6CiAgICBjaXBoZXJ0ZXh0PSIiCiAgICBwbGFpbnRleHQ9VGV4dGJveGZvcm1hdHRlcihwbGFpbnRleHRCb3guZ2V0KCIwLjAiLCAiZW5kIikpCiAgICBjaXBoZXJ0ZXh0PWJhc2U2NEVuY3J5cHQocGxhaW50ZXh0KQogICAgY2lwaGVydGV4dEJveC5kZWxldGUoIjAuMCIsICJlbmQiKQogICAgY2lwaGVydGV4dEJveC5pbnNlcnQoIjAuMCIsIGNpcGhlcnRleHQpCgpkZWYgYmFzZTY0RW5jcnlwdChwbGFpbnRleHQpOgogICAgY2lwaGVydGV4dD1iNjQuYjY0ZW5jb2RlKHBsYWludGV4dC5lbmNvZGUoKSkuZGVjb2RlKCJhc2NpaSIpICN0dXJuIHBsYWludGV4dCBpbnRvIGJhc2UgNjQKICAgIHJldHVybiBjaXBoZXJ0ZXh0CiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIwoiIiIKICAgIFB1cnBvc2U6IEVuY3J5cHQgcGxhaW50ZXh0IHdpdGggc3Vic3RpdHV0aW9uIG1ldGhvZAogICAgUmVxdWlyZW1lbnQ6IEVuY3J5cHQgYnV0dG9uIGJlIHByZXNzZWQsIHRoZXJlIGlzIGEgcGxhaW50ZXh0IHRvIGVuY3J5cHQKICAgIFByb21pc2U6IHBsYWNlIGVuY3J5cHRlZCBwbGFpbnRleHQgaW4gY2lwaGVydGV4dCBib3gKIiIiCiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIwpkZWYgY2FsbFN1YnN0aXR1dGlvbkVuY3J5cHQoKToKICAgIGNpcGhlcnRleHQ9IiIKICAgIHBsYWludGV4dD1UZXh0Ym94Zm9ybWF0dGVyKHBsYWludGV4dEJveC5nZXQoIjAuMCIsICJlbmQiKSkKICAgIGNpcGhlcnRleHQ9c3Vic3RpdHV0aW9uRW5jcnlwdChwbGFpbnRleHQpCiAgICBjaXBoZXJ0ZXh0Qm94LmRlbGV0ZSgiMC4wIiwgImVuZCIpCiAgICBjaXBoZXJ0ZXh0Qm94Lmluc2VydCgiMC4wIiwgY2lwaGVydGV4dCkKCmRlZiBzdWJzdGl0dXRpb25FbmNyeXB0KHBsYWludGV4dCk6CiAgICBjaXBoZXJ0ZXh0PSIiCiAgICBmb3IgaSBpbiBwbGFpbnRleHQ6CiAgICAgICAgY2lwaGVydGV4dCs9KHN0cihvcmQoaSkpICsgIiAiKSAjY29tYmluZSBhbmQgZ2V0IGFsbCB0aGUgYXNjaWkgdmFsdWVzIGZvciB0aGUgcGxhaW50ZXh0IAogICAgcmV0dXJuIGNpcGhlcnRleHQKIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0jCiIiIgogICAgUHVycG9zZTogRGVjcnlwdCBjaXBoZXJ0ZXh0IHdpdGggdHJpZmlkIG1ldGhvZAogICAgUmVxdWlyZW1lbnQ6IERlY3J5cHQgYnV0dG9uIGJlIHByZXNzZWQsIHRoZXJlIGlzIGEgY2lwaGVydGV4dCB0byBkZWNyeXB0LCBrZXkgaXMgdGhlIHNhbWUgYXMgdGhlIG9uZSB1c2VkIHRvIGVuY3J5cHQKICAgIFByb21pc2U6IHBsYWNlIGRlY3J5cHRlZCBjaXBoZXJ0ZXh0IGluIHBsYWludGV4dCBib3gKIiIiCiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIwpkZWYgY2FsbFRyaWZpZERlY3J5cHQoKTogIyAhIiMkJSYnKCkqKywtLi8wMTIzNDU2Nzg5Ojs8PT4/QEFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaW1xdXl9gYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXp7fH1+wqHCosKjwqTCpcKmwqfCqMKpwqrCq8Kswq/CsMKxwrLDnsK1wrbCt8WTwrnCusK7wrzKp8K9wr/IveKZpQogICAgY2lwaGVydGV4dD1UZXh0Ym94Zm9ybWF0dGVyKGNpcGhlcnRleHRCb3guZ2V0KCIwLjAiLCAiZW5kIikpCiAgICBrZXk9a2V5Qm94LmdldCgpCiAgICBwbGFpbnRleHQgPSB0cmlmaWREZWNyeXB0KGtleSwgY2lwaGVydGV4dCkKICAgIHBsYWludGV4dEJveC5kZWxldGUoIjAuMCIsICJlbmQiKQogICAgcGxhaW50ZXh0Qm94Lmluc2VydCgiMC4wIiwgcGxhaW50ZXh0KQoKZGVmIHRyaWZpZERlY3J5cHQoa2V5LCBjaXBoZXJ0ZXh0KTogIyAhIiMkJSYnKCkqKywtLi8wMTIzNDU2Nzg5Ojs8PT4/QEFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaW1xdXl9gYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXp7fH1+wqHCosKjwqTCpcKmwqfCqMKpwqrCq8Kswq/CsMKxwrLDnsK1wrbCt8WTwrnCusK7wrzKp8K9wr/IveKZpQogICAgY2lwaGVyTGlzdD1saXN0KGNpcGhlcnRleHQpCiAgICBrZXlMaXN0PWxpc3Qoa2V5LnJlcGxhY2UoIuKZpSIsIlxuIikpICNhbGxvd3Mga2V5cyB0byBoYXZlIOKZpSBpbnN0ZWFkIG9mIG5ld2xpbmUgY2hhcmFjdGVyLCBwdXJlbHkgYSBjb3NtZXRpYyBjaG9pY2UKICAgIHRyeToKICAgICAgICBjaXBoZXJLZXk9bnAucmVzaGFwZShrZXlMaXN0LCg1LDUsNSkpICNyZXNoYXBlIGtleSBpbnRvIGtleSBjdWJlCiAgICAgICAgeENvb3JkaW5hdGUgPSBbXQogICAgICAgIHlDb29yZGluYXRlID0gW10KICAgICAgICB6Q29vcmRpbmF0ZSA9IFtdCiAgICAgICAgZm9yIGkgaW4gY2lwaGVyTGlzdDoKICAgICAgICAgICAgZm9yIHggaW4gcmFuZ2UoNSk6CiAgICAgICAgICAgICAgICBmb3IgeSBpbiByYW5nZSg1KToKICAgICAgICAgICAgICAgICAgICBmb3IgeiBpbiByYW5nZSg1KToKICAgICAgICAgICAgICAgICAgICAgICAgaWYgY2lwaGVyS2V5W3hdW3ldW3pdID09IGk6ICN0dXJuIHBsYWludGV4dCBpbnRvIGNvb3JkaW5hdGVzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4Q29vcmRpbmF0ZS5hcHBlbmQoeCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHlDb29yZGluYXRlLmFwcGVuZCh5KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgekNvb3JkaW5hdGUuYXBwZW5kKHopCiAgICAgICAgcGxhaW5MaXN0PVtdCiAgICAgICAgZm9yIGkgaW4gcmFuZ2UobGVuKGNpcGhlckxpc3QpKToKICAgICAgICAgICAgcGxhaW5MaXN0LmFwcGVuZChjaXBoZXJLZXlbeENvb3JkaW5hdGVbaV1dW3lDb29yZGluYXRlWyAoaSsxKSAlIGxlbihjaXBoZXJMaXN0KV1dW3pDb29yZGluYXRlWyAoaSsyKSAlIGxlbihjaXBoZXJMaXN0KV1dKSAjc2hpZnQgY29vcmRpbmF0ZXMgYmFjayBhbmQgd3JpdGUgb3V0IHRoZSBwbGFpbnRleHQKICAgICAgICBwbGFpbnRleHQ9IiIuam9pbihwbGFpbkxpc3QpCiAgICAgICAgCiAgICBleGNlcHQgVmFsdWVFcnJvcjoKICAgICAgICBtZXNzYWdlYm94LnNob3d3YXJuaW5nKCJWYWx1ZSBFcnJvciIsIktleSB0b28gbGFyZ2Ugb3IgdG9vIHNtYWxsIikKICAgIGV4Y2VwdCBJbmRleEVycm9yOgogICAgICAgIG1lc3NhZ2Vib3guc2hvd3dhcm5pbmcoIkluZGV4IEVycm9yIiwiQ2hhcmFjdGVyIGluIHBsYWludGV4dCB0aGF0IGlzIG5vdCBpbiB0aGUga2V5IikKICAgIHJldHVybiBwbGFpbnRleHQKIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0jCiIiIgogICAgUHVycG9zZTogRGVjcnlwdCBjaXBoZXJ0ZXh0IHdpdGggY2Flc2FyIG1ldGhvZAogICAgUmVxdWlyZW1lbnQ6IERlY3J5cHQgYnV0dG9uIGJlIHByZXNzZWQsIHRoZXJlIGlzIGEgY2lwaGVydGV4dCB0byBkZWNyeXB0LCBzaGlmdCBpcyB0aGUgc2FtZSBhcyB0aGUgb25lIHVzZWQgdG8gZW5jcnlwdAogICAgUHJvbWlzZTogcGxhY2UgZGVjcnlwdGVkIGNpcGhlcnRleHQgaW4gcGxhaW50ZXh0IGJveAoiIiIKIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0jCmRlZiBjYWxsQ2Flc2FyRGVjcnlwdCgpOgogICAgc2hpZnQ9aW50KHNoaWZ0Qm94LmdldCgpKSAjZ3JhYiBrZXkgYW5kIG1ha2Ugc3VyZSBJIGNhbiBkbyBtYXRoIHdpdGggaXQKICAgIGNpcGhlcnRleHQ9VGV4dGJveGZvcm1hdHRlcihjaXBoZXJ0ZXh0Qm94LmdldCgiMC4wIiwgImVuZCIpKSAKICAgIHBsYWludGV4dD1jYWVzYXJEZWNyeXB0KHNoaWZ0LCBjaXBoZXJ0ZXh0KQogICAgcGxhaW50ZXh0Qm94LmRlbGV0ZSgiMC4wIiwgImVuZCIpCiAgICBwbGFpbnRleHRCb3guaW5zZXJ0KCIwLjAiLCBwbGFpbnRleHQpCgpkZWYgY2Flc2FyRGVjcnlwdChzaGlmdCwgY2lwaGVydGV4dCk6CiAgICBhc2NpaUxpc3Q9bGlzdCgnJycgISIjJCUmJygpKissLS4vMDEyMzQ1Njc4OTo7PD0+P0BBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWltcXF1eX2BhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ent8fX7CocKiwqPCpMKlwqbCp8KowqnCqsKrwqzCr8KwwrHCssOewrXCtsK3xZPCucK6wrvCvMqnwr3Cv8i9XG4nJycpCiAgICBjaXBoZXJOdW1iZXJzPVtdCiAgICBwbGFpbnRleHQ9IiIKICAgIGZvciBpIGluIGNpcGhlcnRleHQ6CiAgICAgICAgY2lwaGVyTnVtYmVycy5hcHBlbmQoYXNjaWlMaXN0LmluZGV4KGkpKSN1c2luZyB0aGUgbGlzdCBJIHByb3ZpZGUsIHNoaWZ0IHRoZSBsZXR0ZXJzIGFyb3VuZCwgdGhpcyBsaXN0IGNhbiBiZSBjb25maWd1cmVkIGF0IHdpbGwKICAgIHBsYWluTnVtYmVycyA9IFt4LXNoaWZ0IGZvciB4IGluIGNpcGhlck51bWJlcnNdICN1c2UgbmVnYXRpdmUgc2hpZnQgdG8gYWxsIGNoYXJhY3RlcnMgaW4gcGxhaW50ZXh0IGJlY2F1c2UgaXQgaXMgZGVjcnlwdGlvbgogICAgZm9yIGkgaW4gcGxhaW5OdW1iZXJzOgogICAgICAgIHBsYWludGV4dCs9YXNjaWlMaXN0W2klbGVuKGFzY2lpTGlzdCldICN1c2luZyAlIHRvIGF2b2lkIHNoaWZ0cyB0b28gbGFyZ2UgYmVpbmcgYSBwcm9ibGVtCiAgICByZXR1cm4gcGxhaW50ZXh0CgojIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSMKIiIiCiAgICBQdXJwb3NlOiBEZWNyeXB0IGNpcGhlcnRleHQgd2l0aCBSU0EgbWV0aG9kIGFuZCB0aGUgcHJpdmF0ZSBrZXkKICAgIFJlcXVpcmVtZW50OiBEZWNyeXB0IGJ1dHRvbiBiZSBwcmVzc2VkLCB0aGVyZSBpcyBhIGNpcGhlcnRleHQgdG8gZGVjcnlwdAogICAgUHJvbWlzZTogcGxhY2UgZGVjcnlwdGVkIGNpcGhlcnRleHQgaW4gcGxhaW50ZXh0IGJveAoiIiIKIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0jCmRlZiBjYWxsUlNBUHJpdkRlY3J5cHQoKToKICAgIHByaXZhdGVLZXksIHB1YmxpY0tleSA9IFJTQUdlbktleXMoKQogICAgY2lwaGVydGV4dD1UZXh0Ym94Zm9ybWF0dGVyKGNpcGhlcnRleHRCb3guZ2V0KCIwLjAiLCAiZW5kIikpCiAgICBwbGFpbnRleHQgPSBSU0FQcml2RGVjcnlwdChwcml2YXRlS2V5LCBjaXBoZXJ0ZXh0KQogICAgcGxhaW50ZXh0Qm94LmRlbGV0ZSgiMC4wIiwgImVuZCIpCiAgICBwbGFpbnRleHRCb3guaW5zZXJ0KCIwLjAiLCBwbGFpbnRleHQpCgpkZWYgUlNBUHJpdkRlY3J5cHQocHJpdmF0ZUtleSwgY2lwaGVydGV4dCk6CiAgICBjaXBoZXJMaXN0PWNpcGhlcnRleHQuc3BsaXQoIuKZpeKZpeKZpeKZpeKZpSIpICN0YWtlIGFwYXJ0IHRoZSBjaXBoZXJ0ZXh0IHRoYXQgd2FzIGNyYWZ0ZWQgYW5kIHRoZW4gcGVyZm9ybSB0aGUgZGVjcnlwdGlvbgogICAgcGxhaW50ZXh0PSIiCiAgICBmb3IgaSBpbiBjaXBoZXJMaXN0OgogICAgICAgIGlmIGkgIT0gIiI6ICNudWxsIHBhcnQgd291bGQgbWFrZSBpdCBicmVhaywgdGhpcyBzdG9wcyB0aGF0CiAgICAgICAgICAgIHBsYWludGV4dCs9cnNhLmRlY3J5cHRSU0EoaSwgcHJpdmF0ZUtleSkgI3N0aXRjaCBiYWNrIGFsbCBvZiB0aGUgcGllY2VzIHRvZ2V0aGVyCiAgICByZXR1cm4gcGxhaW50ZXh0CiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIwoiIiIKICAgIFB1cnBvc2U6IERlY3J5cHQgY2lwaGVydGV4dCB3aXRoIGJhc2UgNjQgbWV0aG9kCiAgICBSZXF1aXJlbWVudDogRGVjcnlwdCBidXR0b24gYmUgcHJlc3NlZCwgdGhlcmUgaXMgYSBjaXBoZXJ0ZXh0IHRvIGRlY3J5cHQKICAgIFByb21pc2U6IHBsYWNlIGRlY3J5cHRlZCBjaXBoZXJ0ZXh0IGluIHBsYWludGV4dCBib3gKIiIiCiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIwpkZWYgY2FsbEJhc2U2NERlY3J5cHQoKToKICAgIHBsYWludGV4dD0iIgogICAgY2lwaGVydGV4dD1UZXh0Ym94Zm9ybWF0dGVyKGNpcGhlcnRleHRCb3guZ2V0KCIwLjAiLCAiZW5kIikpCiAgICBwbGFpbnRleHQ9YmFzZTY0RGVjcnlwdChjaXBoZXJ0ZXh0KQogICAgcGxhaW50ZXh0Qm94LmRlbGV0ZSgiMC4wIiwgImVuZCIpCiAgICBwbGFpbnRleHRCb3guaW5zZXJ0KCIwLjAiLCBwbGFpbnRleHQpCgpkZWYgYmFzZTY0RGVjcnlwdChjaXBoZXJ0ZXh0KToKICAgIHBsYWludGV4dD1iNjQuYjY0ZGVjb2RlKGNpcGhlcnRleHQpLmRlY29kZSgiYXNjaWkiKSAjdHVybiBjaXBoZXJ0ZXh0IGZyb20gYmFzZSA2NAogICAgcmV0dXJuIHBsYWludGV4dAojIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSMKIiIiCiAgICBQdXJwb3NlOiBEZWNyeXB0IGNpcGhlcnRleHQgd2l0aCBzdWJzdGl0dXRpb24gbWV0aG9kCiAgICBSZXF1aXJlbWVudDogRGVjcnlwdCBidXR0b24gYmUgcHJlc3NlZCwgdGhlcmUgaXMgYSBjaXBoZXJ0ZXh0IHRvIGRlY3J5cHQKICAgIFByb21pc2U6IHBsYWNlIGRlY3J5cHRlZCBjaXBoZXJ0ZXh0IGluIHBsYWludGV4dCBib3gKIiIiCiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIwpkZWYgY2FsbFN1YnN0aXR1dGlvbkRlY3J5cHQoKToKICAgIHBsYWludGV4dD0iIgogICAgY2lwaGVydGV4dD1UZXh0Ym94Zm9ybWF0dGVyKGNpcGhlcnRleHRCb3guZ2V0KCIwLjAiLCAiZW5kIikpCiAgICBwbGFpbnRleHQ9c3Vic3RpdHV0aW9uRGVjcnlwdChjaXBoZXJ0ZXh0KQogICAgcGxhaW50ZXh0Qm94LmRlbGV0ZSgiMC4wIiwgImVuZCIpCiAgICBwbGFpbnRleHRCb3guaW5zZXJ0KCIwLjAiLCBwbGFpbnRleHQpCgpkZWYgc3Vic3RpdHV0aW9uRGVjcnlwdChjaXBoZXJ0ZXh0KToKICAgIGNpcGhlckxpc3Q9Y2lwaGVydGV4dC5zcGxpdCgpICN0YWtlIGFwYXJ0IHRoZSBsaXN0IG9mIHRoZSBjaGFyYWN0ZXJzIGZvciBlYWNoIHZhbHVlCiAgICBwbGFpbnRleHQ9IiIKICAgIGZvciBpIGluIGNpcGhlckxpc3Q6CiAgICAgICAgcGxhaW50ZXh0Kz1jaHIoaW50KGkpKQogICAgcmV0dXJuIHBsYWludGV4dAojIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSMKIiIiCiAgICBQdXJwb3NlOiBjaGFuZ2VzIHBhc3N3b3JkIG9mIHVzZXIgYmFzZWQgb24gdGhlIHVpZCBwcm92aWRlZAogICAgUmVxdWlyZW1lbnQ6IHRoZXJlIGlzIGEgZ2l2ZW4gdWlkIGFuZCBoYXMgYSB2YWxpZCB1c2VyIGFuZCB0aGUgcGFzc3dvcmQgaXMgbm90IG51bGwKICAgIFByb21pc2U6IGNoYW5nZSBvbmx5IHRoZSBwYXNzd29yZCBvZiB0aGUgdXNlciB3aXRoIHRoZSBnaXZlbiB1aWQKIiIiCiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIwpkZWYgY2hhbmdlUGFzc3dvcmQoKToKICAgIHBhc3N3b3JkPXBhc3N3b3JkQm94LmdldCgpCiAgICB1aWQ9dWlkQm94LmdldCgpIyBzaW1wbGUgZ2V0IGZ1bmN0aW9uIGZyb20gRW50cnkgYm94ZXMsIHRha2VzIGluIHdoYXRldmVyIHdhcyB0aGUgdXNlciBpbnB1dCBpbnRvIHRoZSB1aWQgYm94CiAgICAKICAgIGNyZWRlbnRpYWxzRmlsZSA9IG9wZW4oImNyZWRlbnRpYWxzLnR4dCIsICJyIikKICAgIG5ld0NyZWRlbnRpYWxzRmlsZSA9IG9wZW4oIm5ld2NyZWRlbnRpYWxzLnR4dCIsICJ3IikgI3dyaXRlIHdpbGwgYXV0b21hdGljYWxseSBjcmVhdGUgZmlsZSBpZiBpdCBkb2VzbnQgZXhpc3QgYWxyZWFkeSAod2hpY2ggaXQgc2hvdWxkbid0KSBhbmQgaWYgaXQgZG9lcywgaXQgdHJ1bmNhdGVzIGl0IGFuZCBpdHMgZmluZQogICAgbmV3dWlkPSIwIgogICAgaWYgcGFzc3dvcmQ9PSIiOiN2ZXJpZnkgdGhlIHVzZXIgaW5wdXQgd2FzIG5vdCBudWxsIGZvciBwYXNzd29yZCBvciB1aWQgKGl0IHdvdWxkIGJlIGJhZCB0byBoYXZlIGEgbnVsbCBwYXNzd29yZCBhbmQgbm8gdXNlciBzcGVjaWZpZWQgbWVhbnMgaXQgaXMgYW4gdW5uZWNlc3Nhcnkgb3BlcmF0aW9uKQogICAgICAgIHJldHVybgogICAgaWYgdWlkPT0iIjoKICAgICAgICByZXR1cm4KICAgIGZvciBsaW5lIGluIGNyZWRlbnRpYWxzRmlsZToKICAgICAgICBsaW5lID0gbGluZS5zcGxpdCgifCIsIDIpICN0aGUgcGlwZSBpcyB0aGUgc2VwZXJhdG9yIHRoYXQgSSB1c2UgaW4gdGhlIHVzZXIvcGFzcy91aWQgZmlsZQogICAgICAgIGlmIHVpZCA9PSBsaW5lWzJdLnJlcGxhY2UoJ1xuJywgJycpOiAjbmV3bGluZXMgYmFkID46KCwgb25seSBjaGFuZ2UgdGhlIHBhc3N3b3JkIGZvciB0aGUgcGVyc29uIHdpdGggc3BlY2lmaWVkIHVpZAogICAgICAgICAgICBsaW5lWzFdID0gcGFzc3dvcmQKICAgICAgICBuZXdDcmVkZW50aWFsc0ZpbGUud3JpdGUobGluZVswXSArICJ8IiArIGxpbmVbMV0gKyAifCIgKyBzdHIobmV3dWlkKSArICJcbiIpICNwdXQgdGhlIGZpbGUgYmFjayB0b2dldGhlcgogICAgICAgIG5ld3VpZD0gaW50KGxpbmVbMl0pKzEgI2tlZXAgdGhlIHVpZHMgaW5jcmVtZW50aW5nIGVhY2ggdGltZSBidXQgYWxzbyBub3QgYnJlYWsgCiAgICAKICAgIG5ld0NyZWRlbnRpYWxzRmlsZS5jbG9zZSgpICNjbG9zZSB0aGUgZG9jdW1lbnQKICAgIGNyZWRlbnRpYWxzRmlsZS5jbG9zZSgpICNjbG9zZSB0aGUgZG9jdW1lbnQKICAgIG9zLnJlbW92ZSgiY3JlZGVudGlhbHMudHh0IikjIHJlbW92ZXMgdGhlIGZpbGUgY3JlZGVudGlhbHMgdHh0IHRvIGZyZWUgdXAgdGhlIG5hbWUKICAgIG9zLnJlbmFtZSgibmV3Y3JlZGVudGlhbHMudHh0IiwgImNyZWRlbnRpYWxzLnR4dCIpIyByZW5hbWVzIHRoZSBuZXdseSB3cml0dGVuIGNyZWRlbnRpYWxzIGZpbGUgdG8gdGhlIG9yaWdpbmFsIG5hbWUKIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0jCiIiIgogICAgUHVycG9zZTogY2hhbmdlcyB1c2VybmFtZSBvZiB1c2VyIGJhc2VkIG9uIHRoZSB1aWQgcHJvdmlkZWQKICAgIFJlcXVpcmVtZW50OiB0aGVyZSBpcyBhIGdpdmVuIHVpZCBhbmQgaGFzIGEgdmFsaWQgdXNlciBhbmQgdGhlIHVzZXJuYW1lIGlzIG5vdCBudWxsCiAgICBQcm9taXNlOiBjaGFuZ2Ugb25seSB0aGUgdXNlcm5hbWUgb2YgdGhlIHVzZXIgd2l0aCB0aGUgZ2l2ZW4gdWlkCiIiIgojIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSMKZGVmIGNoYW5nZVVzZXJuYW1lKCk6CiAgICB1c2VybmFtZT11c2VybmFtZUJveC5nZXQoKQogICAgdWlkPXVpZEJveC5nZXQoKQogICAgCiAgICBjcmVkZW50aWFsc0ZpbGUgPSBvcGVuKCJjcmVkZW50aWFscy50eHQiLCAiciIpCiAgICBuZXdDcmVkZW50aWFsc0ZpbGUgPSBvcGVuKCJuZXdjcmVkZW50aWFscy50eHQiLCAiYSIpICN3cml0ZSB3aWxsIGF1dG9tYXRpY2FsbHkgY3JlYXRlIGZpbGUgaWYgaXQgZG9lc250IGV4aXN0IGFscmVhZHkgKHdoaWNoIGl0IHNob3VsZG4ndCkgYW5kIGlmIGl0IGRvZXMsIGl0IHRydW5jYXRlcyBpdCBhbmQgaXRzIGZpbmUKICAgIG5ld3VpZD0iMCIKICAgIGlmIHVzZXJuYW1lPT0iIjogCiAgICAgICAgcmV0dXJuCiAgICBpZiB1aWQ9PSIiOgogICAgICAgIHJldHVybgogICAgZm9yIGxpbmUgaW4gY3JlZGVudGlhbHNGaWxlOgogICAgICAgIGxpbmUgPSBsaW5lLnNwbGl0KCJ8IiwgMikjdGhlIHBpcGUgaXMgdGhlIHNlcGVyYXRvciB0aGF0IEkgdXNlIGluIHRoZSB1c2VyL3Bhc3MvdWlkIGZpbGUKICAgICAgICBpZiB1aWQgPT0gbGluZVsyXS5yZXBsYWNlKCdcbicsICcnKTogI25ld2xpbmVzIGJhZCA+OigsIG9ubHkgY2hhbmdlIHRoZSB1c2VybmFtZSBmb3IgdGhlIHBlcnNvbiB3aXRoIHNwZWNpZmllZCB1aWQKICAgICAgICAgICAgbGluZVswXSA9IHVzZXJuYW1lCiAgICAgICAgbmV3Q3JlZGVudGlhbHNGaWxlLndyaXRlKGxpbmVbMF0gKyAifCIgKyBsaW5lWzFdICsgInwiICsgc3RyKG5ld3VpZCkgKyAiXG4iKSAjcHV0IHRoZSBmaWxlIGJhY2sgdG9nZXRoZXIKICAgICAgICBuZXd1aWQ9IGludChsaW5lWzJdKSsxICNrZWVwIHRoZSB1aWRzIGluY3JlbWVudGluZyBlYWNoIHRpbWUgYnV0IGFsc28gbm90IGJyZWFrIAogICAgCiAgICBuZXdDcmVkZW50aWFsc0ZpbGUuY2xvc2UoKQogICAgY3JlZGVudGlhbHNGaWxlLmNsb3NlKCkKICAgIG9zLnJlbW92ZSgiY3JlZGVudGlhbHMudHh0IikKICAgIG9zLnJlbmFtZSgibmV3Y3JlZGVudGlhbHMudHh0IiwgImNyZWRlbnRpYWxzLnR4dCIpCiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIwoiIiIKICAgIFB1cnBvc2U6IG1ha2UgbmV3IHVzZXIgYW5kIGF1dG9tYXRpY2FsbHkgYXNzaWduIGl0IGEgdWlkCiAgICBSZXF1aXJlbWVudDogaGF2ZSBhIHVuaXF1ZSB1c2VybmFtZSBhbmQgYSBub3QgbnVsbCBwYXNzd29yZAogICAgUHJvbWlzZTogYWRkIHVzZXIgd2l0aCBnaXZlbiBkZXRhaWxzIHRvIGNyZWRlbnRpYWxzLnR4dCBmaWxlCiIiIgojIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSMKZGVmIG5ld1VzZXIoKToKICAgIHBhc3N3b3JkPXBhc3N3b3JkQm94LmdldCgpCiAgICB1c2VybmFtZT11c2VybmFtZUJveC5nZXQoKQoKICAgIGNyZWRlbnRpYWxzRmlsZSA9IG9wZW4oImNyZWRlbnRpYWxzLnR4dCIsICJyIikgI21ha2Ugc3VyZSB0aGUgdXNlcm5hbWUgJiBwYXNzd29yZCBhcmUgbm90IG51bGwKICAgIGlmIHVzZXJuYW1lID09ICIiOgogICAgICAgIGNyZWRlbnRpYWxzRmlsZS5jbG9zZSgpCiAgICAgICAgcmV0dXJuCiAgICBpZiBwYXNzd29yZCA9PSAiIjoKICAgICAgICBjcmVkZW50aWFsc0ZpbGUuY2xvc2UoKQogICAgICAgIHJldHVybgogICAgZm9yIGxpbmUgaW4gY3JlZGVudGlhbHNGaWxlOgogICAgICAgIGxpbmUgPSBsaW5lLnNwbGl0KCJ8IiwgMikKICAgICAgICBpZiB1c2VybmFtZSA9PSBsaW5lWzBdLnJlcGxhY2UoJ1xuJywgJycpOiAjaWYgdGhlIHVzZXJuYW1lIGlzIGFscmVhZHkgdGFrZW4gZG8gbm90aGluZwogICAgICAgICAgICByZXR1cm4KICAgICAgICB1aWQ9bGluZVsyXS5yZXBsYWNlKCdcbicsICcnKQogICAgY3JlZGVudGlhbHNGaWxlLmNsb3NlKCkKCiAgICBuZXd1aWQ9IGludCh1aWQpKzEKICAgIGNyZWRlbnRpYWxzRmlsZSA9IG9wZW4oImNyZWRlbnRpYWxzLnR4dCIsICJhIikgI25vdyBhY3R1YWxseSB3cml0ZSBpbiB0aGUgbmV3IHVzZXIgc2luY2UgaXRzIGFsbCBnb29kCiAgICBjcmVkZW50aWFsc0ZpbGUud3JpdGUodXNlcm5hbWUgKyAifCIgKyBwYXNzd29yZCArICJ8IiArIHN0cihuZXd1aWQpICsgIlxuIikgICAgCiAgICBjcmVkZW50aWFsc0ZpbGUuY2xvc2UoKQojIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSMKIiIiCiAgICBQdXJwb3NlOiByZW1vdmUgdXNlciBmcm9tIGNyZWRlbnRpYWxzLnR4dCBmaWxlIGJhc2VkIG9uIHVpZAogICAgUmVxdWlyZW1lbnQ6IHByZXNzIHJlbW92ZSB1c2VyIGJ1dHRvbgogICAgUHJvbWlzZTogcmVtb3ZlIHVzZXIgd2l0aCBnaXZlbiB1aWQgZnJvbSBjcmVkZW50aWFscy50eHQgYW5kIHJlb3JkZXJpbmcgdGhlIGZvbGxvd2luZyB1c2VycyB3aGljaCB3aWxsIGNoYW5nZSBhbGwgdGhlIHVpZAoiIiIKIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0jCmRlZiByZW1vdmV1c2VyKCk6CiAgICB1c2VybmFtZT11c2VybmFtZUJveC5nZXQoKQogICAgdWlkPXVpZEJveC5nZXQoKQogICAgCiAgICBjcmVkZW50aWFsc0ZpbGUgPSBvcGVuKCJjcmVkZW50aWFscy50eHQiLCAiciIpCiAgICBuZXdDcmVkZW50aWFsc0ZpbGUgPSBvcGVuKCJuZXdjcmVkZW50aWFscy50eHQiLCAidyIpICN3cml0ZSB3aWxsIGF1dG9tYXRpY2FsbHkgY3JlYXRlIGZpbGUgaWYgaXQgZG9lc250IGV4aXN0IGFscmVhZHkgKHdoaWNoIGl0IHNob3VsZG4ndCkgYW5kIGlmIGl0IGRvZXMsIGl0IHRydW5jYXRlcyBpdCBhbmQgaXRzIGZpbmUKICAgIG5ld3VpZD0iMCIKICAgIHJlcGxhY2VkVXNlcnM9MAogICAgZm9yIGxpbmUgaW4gY3JlZGVudGlhbHNGaWxlOgogICAgICAgIGxpbmUgPSBsaW5lLnNwbGl0KCJ8IiwgMikjdGhlIHBpcGUgaXMgdGhlIHNlcGVyYXRvciB0aGF0IEkgdXNlIGluIHRoZSB1c2VyL3Bhc3MvdWlkIGZpbGUKICAgICAgICBpZiB1aWQgPT0gbGluZVsyXS5yZXBsYWNlKCdcbicsICcnKSBvciB1c2VybmFtZSA9PSBsaW5lWzBdLnJlcGxhY2UoIlxuIiwgIiIpOiAjbmV3bGluZXMgYmFkID46KCwgb25seSByZW1vdmUgdXNlciB3aXRoIHNwZWNpZmllZCB1aWQgb3Igc3BlY2lmaWVkIHVzZXJuYW1lCiAgICAgICAgICAgIG5ld3VpZD0gaW50KGxpbmVbMl0pCiAgICAgICAgICAgIHJlcGxhY2VkVXNlcnMrPTEKICAgICAgICBlbHNlOgogICAgICAgICAgICBuZXdDcmVkZW50aWFsc0ZpbGUud3JpdGUobGluZVswXSArICJ8IiArIGxpbmVbMV0gKyAifCIgKyBzdHIobmV3dWlkKSArICJcbiIpI3B1dCB0aGUgZmlsZSBiYWNrIHRvZ2V0aGVyCiAgICAgICAgICAgIAogICAgICAgIG5ld3VpZD0gaW50KGxpbmVbMl0pICsgMSAtIHJlcGxhY2VkVXNlcnMgI2tlZXAgdGhlIHVpZHMgaW5jcmVtZW50aW5nIGVhY2ggdGltZSBidXQgYWxzbyBub3QgYnJlYWssIG5vdyBhY2NvdW50aW5nIGZvciB0aGUgdXNlcnMgcmVtb3ZlZCwgdGhpcyB3YXMgdGhlIGVhc2llc3Qgc29sdXRpb24gSSBjb3VsZCB0aGluayBvZgogICAgCiAgICBuZXdDcmVkZW50aWFsc0ZpbGUuY2xvc2UoKQogICAgY3JlZGVudGlhbHNGaWxlLmNsb3NlKCkKICAgIG9zLnJlbW92ZSgiY3JlZGVudGlhbHMudHh0IikKICAgIG9zLnJlbmFtZSgibmV3Y3JlZGVudGlhbHMudHh0IiwgImNyZWRlbnRpYWxzLnR4dCIpCgojIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSMKIiIiCiAgICBQdXJwb3NlOiBjaGVjayBpZiB1c2VyIGhhcyB2YWxpZCBjcmVkZW50aWFscyBiZWZvcmUgaW5pdGlhbGlzaW5nIHByb2dyYW0KICAgIFJlcXVpcmVtZW50OiBzdWJtaXQgdmFsaWQgdXNlcm5hbWUgYW5kIHBhc3N3b3JkCiAgICBQcm9taXNlOiBpbml0aWFsaXNlIHByb2dyYW0KIiIiCiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIwppZiBscy5zdGFydCgpOgogICAgd2luZG93PWN1c3RvbXRraW50ZXIuQ1RrKCkKICAgIHdpbmRvdy5yb3djb25maWd1cmUoaW5kZXg9WzAsIDEsIDIsIDMsIDRdLCBtaW5zaXplPTExMCkKICAgIHdpbmRvdy5jb2x1bW5jb25maWd1cmUoaW5kZXg9MCwgbWluc2l6ZT0xMTApCiAgICAjd2luZG93Lm1pbnNpemUoMzY2LCA1NTApCiAgICAjd2luZG93Lm1heHNpemUoMzY2LCA1NTApCgogICAgQkFTRV9ESVIgPSBvcy5wYXRoLmRpcm5hbWUob3MucGF0aC5hYnNwYXRoKF9fZmlsZV9fKSkKICAgIGljb25fcGF0aCA9IG9zLnBhdGguam9pbihCQVNFX0RJUiwgJ1NjaG9vbF9sb2dvX0xha2VfRy5pY28nKSAjTGFrZSBHIGljbyBmb3IgYm90aCB3aW5kb3dzCiAgICB3aW5kb3cuaWNvbmJpdG1hcChpY29uX3BhdGgpCiAgICB3aW5kb3cudGl0bGUoIkVuY3J5cHRpb25Qcm9ncmFtIikgI25pY2UgbmFtZSA6RAogICAgdHJpZmlkQnV0dG9uPWN1c3RvbXRraW50ZXIuQ1RrQnV0dG9uKHdpbmRvdywgYm9yZGVyX3dpZHRoPTEsIGNvcm5lcl9yYWRpdXM9MyAsIGZnX2NvbG9yPSIjM2Y1Nzk5IiwgY29tbWFuZD0gdHJpZmlkLCB0ZXh0PSJUcmlmaWQiLCB0ZXh0X2NvbG9yPSJibGFjayIpICNhbGwgdGhlIG1ldGhvZCBidXR0b25zCiAgICBjYWVzYXJCdXR0b249Y3VzdG9tdGtpbnRlci5DVGtCdXR0b24od2luZG93LCBib3JkZXJfd2lkdGg9MSwgY29ybmVyX3JhZGl1cz0zICwgZmdfY29sb3I9IiMzZjU3OTkiLCBjb21tYW5kPSBjYWVzYXIsIHRleHQ9IkNhZXNhciIsIHRleHRfY29sb3I9ImJsYWNrIikKICAgIFJTQUJ1dHRvbj1jdXN0b210a2ludGVyLkNUa0J1dHRvbih3aW5kb3csIGJvcmRlcl93aWR0aD0xLCBjb3JuZXJfcmFkaXVzPTMgLCBmZ19jb2xvcj0iIzNmNTc5OSIsIGNvbW1hbmQ9IFJTQSwgdGV4dD0iUlNBIiwgdGV4dF9jb2xvcj0iYmxhY2siKQogICAgYjY0QnV0dG9uPWN1c3RvbXRraW50ZXIuQ1RrQnV0dG9uKHdpbmRvdywgYm9yZGVyX3dpZHRoPTEsIGNvcm5lcl9yYWRpdXM9MyAsIGZnX2NvbG9yPSIjM2Y1Nzk5IiwgY29tbWFuZD0gYmFzZTY0LCB0ZXh0PSJCYXNlIDY0IiwgdGV4dF9jb2xvcj0iYmxhY2siKQogICAgc3Vic3RpdHV0aW9uQnV0dG9uPWN1c3RvbXRraW50ZXIuQ1RrQnV0dG9uKHdpbmRvdywgYm9yZGVyX3dpZHRoPTEsIGNvcm5lcl9yYWRpdXM9MyAsIGZnX2NvbG9yPSIjM2Y1Nzk5IiwgY29tbWFuZD0gc3Vic3RpdHV0aW9uLCB0ZXh0PSJTdWJzdGl0dXRpb24iLCB0ZXh0X2NvbG9yPSJibGFjayIpCiAgICAKICAgIGNoYW5nZURldGFpbHNCdXR0b249Y3VzdG9tdGtpbnRlci5DVGtCdXR0b24od2luZG93LCBoZWlnaHQ9MSwgd2lkdGg9NywgYm9yZGVyX3dpZHRoPTEsIGNvcm5lcl9yYWRpdXM9MiAsIGZnX2NvbG9yPSIjM2Y1Nzk5IiwgY29tbWFuZD0gY2hhbmdlRGV0YWlscywgdGV4dD0iRGV0YWlscyIsIHRleHRfY29sb3I9ImJsYWNrIikgI2RldGFpbCBidXR0b24KCiAgICB0cmlmaWRCdXR0b24uZ3JpZChjb2x1bW49MCwgcm93PTAsIHN0aWNreT0ibnNldyIpICMgdW5saWtlIGEgbG90IG9mIHRoZSBvdGhlciB3aWRnZXRzLCB3ZSBhbHdheXMgd2FudCB0aGVzZSBvbmVzIHZpc2libGUgYW5kIGFjY2Vzc2libGUgc28gdGhleSBhcmUgcHV0IGludG8gdGhlIHdpbmRvdyBhdCB0aGUgc3RhcnQKICAgIGNhZXNhckJ1dHRvbi5ncmlkKGNvbHVtbj0wLCByb3c9MSwgc3RpY2t5PSJuc2V3IikKICAgIFJTQUJ1dHRvbi5ncmlkKGNvbHVtbj0wLCByb3c9Miwgc3RpY2t5PSJuc2V3IikKICAgIGI2NEJ1dHRvbi5ncmlkKGNvbHVtbj0wLCByb3c9Mywgc3RpY2t5PSJuc2V3IikKICAgIHN1YnN0aXR1dGlvbkJ1dHRvbi5ncmlkKGNvbHVtbj0wLCByb3c9NCwgc3RpY2t5PSJuc2V3IikKICAgIGNoYW5nZURldGFpbHNCdXR0b24uZ3JpZChjb2x1bW49MSwgcm93PTAsIHN0aWNreT0ibmUiKQoKICAgIHBsYWludGV4dExhYmVsPWN1c3RvbXRraW50ZXIuQ1RrTGFiZWwod2luZG93LCB0ZXh0PSJQbGFpbnRleHQ6IikKICAgIHBsYWludGV4dEJveD1jdXN0b210a2ludGVyLkNUa1RleHRib3god2luZG93LCBoZWlnaHQ9MykgIyB0aGUgcGxhaW50ZXh0IGFuZCBjaXBpaGVydGV4dCBmaWVsZHMgbmVlZCB0byBiZSBUZXh0IHRvIGFsbG93IG11bHRpbGluZSBtZXNzYWdlcyB0byBiZSBlYXNpbHkgdmlzaWJsZSBmb3IgdGhlIGVuZCB1c2VyCiAgICBjaXBoZXJ0ZXh0TGFiZWw9Y3VzdG9tdGtpbnRlci5DVGtMYWJlbCh3aW5kb3csIHRleHQ9IkNpcGhlcnRleHQ6IikKICAgIGNpcGhlcnRleHRCb3g9Y3VzdG9tdGtpbnRlci5DVGtUZXh0Ym94KHdpbmRvdywgaGVpZ2h0PTMpCgogICAgdXNlcm5hbWVCb3g9Y3VzdG9tdGtpbnRlci5DVGtFbnRyeSh3aW5kb3csIHRleHR2YXJpYWJsZT0iIiwganVzdGlmeT0ibGVmdCIpICN1c2VybmFtZS9wYXNzd29yZC91aWQgYm94ZXMgYW5kIGxhYmVscwogICAgcGFzc3dvcmRCb3g9Y3VzdG9tdGtpbnRlci5DVGtFbnRyeSh3aW5kb3csIHRleHR2YXJpYWJsZT0iIiwganVzdGlmeT0ibGVmdCIpCiAgICB1aWRCb3g9Y3VzdG9tdGtpbnRlci5DVGtFbnRyeSh3aW5kb3csIHRleHR2YXJpYWJsZT0iIiwganVzdGlmeT0ibGVmdCIpCiAgICB1c2VybmFtZUxhYmVsPWN1c3RvbXRraW50ZXIuQ1RrTGFiZWwod2luZG93LCB0ZXh0PSJVc2VybmFtZToiKQogICAgcGFzc3dvcmRMYWJlbD1jdXN0b210a2ludGVyLkNUa0xhYmVsKHdpbmRvdywgdGV4dD0iUGFzc3dvcmQ6IikKICAgIHVpZExhYmVsPWN1c3RvbXRraW50ZXIuQ1RrTGFiZWwod2luZG93LCB0ZXh0PSJVSUQ6IikKCiAgICBlbmNyeXB0QnV0dG9uPWN1c3RvbXRraW50ZXIuQ1RrQnV0dG9uKHdpbmRvdywgdGV4dD0iRW5jcnlwdCIsIGZnX2NvbG9yPSJob3RwaW5rIikgI2VuYy9kZWMgYnV0dG9ucwogICAgZGVjcnlwdEJ1dHRvbj1jdXN0b210a2ludGVyLkNUa0J1dHRvbih3aW5kb3csIHRleHQ9IkRlY3J5cHQiLCBmZ19jb2xvcj0iaG90cGluayIpCgogICAgY2hhbmdlUGFzc3dvcmRCdXR0b249Y3VzdG9tdGtpbnRlci5DVGtCdXR0b24od2luZG93LCBoZWlnaHQ9MSwgd2lkdGg9MjIsIGJvcmRlcl93aWR0aD0xLCBmZ19jb2xvcj0iIzNmNTc5OSIsIGNvbW1hbmQ9IGNoYW5nZVBhc3N3b3JkLCB0ZXh0PSJjaGFuZ2VQYXNzd29yZCIsIHRleHRfY29sb3I9ImJsYWNrIikgI2J1dHRvbnMgdGhhdCBjYWxsIHRoZWlyIG5hbWVzYWtlIGZ1bmN0aW9uCiAgICBjaGFuZ2VVc2VybmFtZUJ1dHRvbj1jdXN0b210a2ludGVyLkNUa0J1dHRvbih3aW5kb3csIGhlaWdodD0xLCB3aWR0aD0yMiwgYm9yZGVyX3dpZHRoPTEsIGZnX2NvbG9yPSIjM2Y1Nzk5IiwgY29tbWFuZD0gY2hhbmdlVXNlcm5hbWUsIHRleHQ9ImNoYW5nZVVzZXJuYW1lIiwgdGV4dF9jb2xvcj0iYmxhY2siKSMgZXZlcnl0aGluZyBvdGhlciB0aGFuIHRoZSBjb21tYW5kIGlzIGNvc21ldGljCiAgICBuZXdVc2VyQnV0dG9uPWN1c3RvbXRraW50ZXIuQ1RrQnV0dG9uKHdpbmRvdywgaGVpZ2h0PTEsIHdpZHRoPTExLCBib3JkZXJfd2lkdGg9MSwgZmdfY29sb3I9IiMzZjU3OTkiLCBjb21tYW5kPSBuZXdVc2VyLCB0ZXh0PSJuZXdVc2VyIiwgdGV4dF9jb2xvcj0iYmxhY2siKQogICAgcmVtb3ZlVXNlckJ1dHRvbj1jdXN0b210a2ludGVyLkNUa0J1dHRvbih3aW5kb3csIGhlaWdodD0xLCB3aWR0aD0xOCwgYm9yZGVyX3dpZHRoPTEsIGZnX2NvbG9yPSIjM2Y1Nzk5IiwgY29tbWFuZD0gcmVtb3ZldXNlciwgdGV4dD0icmVtb3ZldXNlciIsIHRleHRfY29sb3I9ImJsYWNrIikKCiAgICBrZXlCb3g9Y3VzdG9tdGtpbnRlci5DVGtFbnRyeSh3aW5kb3csIHRleHR2YXJpYWJsZT0iIiwganVzdGlmeT0ibGVmdCIpICN0cmlmaWQga2V5IGJveC9sYWJlbCwgaW5kZXBlbmRhbnQgYmVjYXVzZSB0aGF0IHdheSBpdCBpcyBrZXB0IHdoZW4gdXNpbmcgb3RoZXIgbWV0aG9kcwogICAga2V5TGFiZWw9Y3VzdG9tdGtpbnRlci5DVGtMYWJlbCh3aW5kb3csIHRleHQ9IktleToiKQoKICAgIHNoaWZ0Qm94PWN1c3RvbXRraW50ZXIuQ1RrRW50cnkod2luZG93LCB0ZXh0dmFyaWFibGU9IiIsIGp1c3RpZnk9ImxlZnQiKSAjY2Flc2FyIHNoaWZ0CiAgICBzaGlmdExhYmVsPWN1c3RvbXRraW50ZXIuQ1RrTGFiZWwod2luZG93LCB0ZXh0PSJTaGlmdDoiKQoKICAgIHByaXZhdGVLZXlCb3g9Y3VzdG9tdGtpbnRlci5DVGtFbnRyeSh3aW5kb3csIHRleHR2YXJpYWJsZT0iIiwganVzdGlmeT0ibGVmdCIpCiAgICBwcml2YXRlS2V5TGFiZWw9Y3VzdG9tdGtpbnRlci5DVGtMYWJlbCh3aW5kb3csIHRleHQ9IlByaXZhdGUgS2V5OiIpICNwcml2L3B1YiBrZXkKCiAgICBwdWJsaWNLZXlCb3g9Y3VzdG9tdGtpbnRlci5DVGtFbnRyeSh3aW5kb3csIHRleHR2YXJpYWJsZT0iIiwganVzdGlmeT0ibGVmdCIpCiAgICBwdWJsaWNLZXlMYWJlbD1jdXN0b210a2ludGVyLkNUa0xhYmVsKHdpbmRvdywgdGV4dD0iUHVibGljIEtleToiKQoKICAgIHdpbmRvdy5tYWlubG9vcCgp"
#base64 version of the encryption W Tkinter.py, may not keep this super updated
exec(b64.b64decode(code))