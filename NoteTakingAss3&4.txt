11/04/2025
reading through the assignment, downloaded rsa.py loginscreen.py and the creds.txt. will grab the ico later, just sorta making sure I know what to write.
I already did lots of the assesment through Ass 1 and 2 so I will include the version I have currently before Ass 3 was handed to us.

current thoughts on implementing RSA to work with texts as long as I want without arbitrarily generating larger keys (takes too long imo)

Current version of the program has a UI that does not scale with the window dynamically though all encryption algorithms work but RSA and given the valid test characters work without issue
trifid keys with multiple of the same character will always have pecularities that is inherent with the encryption

current program works with all ciphers (not RSA) on "Sample_Test_Text.txt" it also doesnt work with caesar because some of the special characters used don't exist in my list, (trifid only with a good key)

13/04/2025
its on github now, so I will have daily updates on what I wrote all organised n stuff

14/04/2025
RSA (mostly) implemented using the RSA.py from classroom

15/04/2025
like 1 line of code and all the RSA now works (public decrypt not working, may figure that one out at the end or sumn)
application works, login screen is implemented but the creds are still currently unencrypted and there is currently no way for the username and password to be changed
gonna reverse engineer reading the credentials file and use that to encrypt/change the username & password tmrw

16/04/2025
bye bye CVEs (:sob:)
redesigning creds file and thinking about encrypting the creds file, gonna do inline format of usernames and passwords *similar* to how windows/linux store stuff because I've been doing root to boot a lil bit and secretsdump.py stuff.
going to dive into loginscreen to make this possible, github will still show all the changes I make, boy oh boy was that a smart idea :D

can make new users, will make it so users and passwords cannot be null and that there can only be one of each user but passwords dont need that requirement.
mkay cool so I decided that I wanted the multiple users but now I can't rlly change the username based on the password because its not exclusive to that user, guess I am gonna have to implement some form of uid ig since uhh sunk cost fallacy
kinda thinking about how to do it and maybe I am just thinking in SQL because I like SQL, but I think some form of pysql might work. Be lazy efficiently

tbh nvm about pysql, I am going to make my delineator smthn longer like ")!@(&&#()!@*#)" if I can, should be alr and I will note it into the how to use
I understand not everyone may know their uid, so ima have a button that shows you, maybe I will do it automatically when you log in and have the box autofilled when you enter the profile, same with the other bits. might have to consume the loginscreen file to make this easier, will check assignment document for that though and implement this feature later
I got ts working, its technically tmrw but idc
its a bit ugly, but it IS functional so I will work on graphics l8r

17/04/2025
bug with edited loginscreen, opens twice
loginscreenlite called it inately if run, fixed that
ima sleep

gonna think about how I might be able to delete users, current thoughts would just be != and not write it into the new file, though with that it would still increment and leave gaps, definitely need to return someones id based on their user, also will still need to make the final rsa function work

18/04/2025
lets try implementing that now, might do two pushes today because of time stuff
had some issues fixing the index because you can remove an index and username at once, maybe I'll change the functionality of that later
I think i'll make some form of "request details based on user, pass, id" and have it somewhere near each field. should be good
making sure it all works before i do optimisations and neaten up the code, though keeping it simple and clean for my personal benefit as I go along



20/04/2025
time to fix rsa size issues, gonna send to file, split to <=200 bytes size then recompile with somme bad char for rsa output and then throw that as ciphertext :D
nvm decided not to do that and am just gonna use normal features to do it, realised a case in which the solution would split the text evenly by character which is great but not if theres say, 0 or A padding which forces a lot of larger characters at the end and then cause one of the iterations to fail and break the encryption of the chunked pieces so I am implementing some form of fail safe that checks each item and makes sure it is smaller than my given max byte value 
every valid character I need to be able to handle will have equal size so that shouldnt be an issue in actual assessment and I do not need to handle the error I am not testing for
should be fine
it seems to work, will do the easier decrypting bit later
not sure if the output input is correct, will check when physically at pc

21/04/2025
its definitely broken, it just kinda decrypts the first section of the message a bunch
I was calling ciphertext instead of i in the for loop :D
it works, praise to the machine gods (there were other solutions but I chose the easiest of just checking that the item being decrypted was not just empty)

all left to do I think I just need to add comments make it pretty and perhaps also clean up code, I think I will just remove priv encrypt and pub decrypt and just deal with not being able to sign messages ig /shrug
I also might not need the odd delimiter if the rsa output is always the same char length (which I think it is and can just be split)

22/04/2025
time to remove the kinda unecessary rsa encryption bits as they dont work and I would need to change to much to get it to work for now, may be revisited later
messed with gui stuff and made it scale fine and will push this version but I will be revising the changes because I don't like the scaling of the window changing the UI, I think it looks best as one size, if needed this can be changed

forgot to implement finding UID based on username before commenting but that is gonna be a simple button and function so should be fine anyway
gonna split with pipe (|) so none of thems in username or password, missuse of program at the moment (having pipes in shiz) will break it, I will make error handling for it though

PRPs not quite done but almost done, might just not do much more programming before school goes back and then get feedback before fixing up and polishing off

23/04/2025
Some small changes to code where I saw issues or bits I hadn't yet fixed up, still yet to remove all the printing stuff that has existed forever but I am not bothered right now
fully commented now, will check in to see if bits need further clarification at some point


30/04/2025
need to make enter place in a newling character and have more visible giu, probably have a scrollbar both vertical and horizontal and make the general UI bigger, larger fonts on buttons and larger buttons etc then maybe same font size for the actual textboxes
making some stuff that makes the window size a variable and all the other sizes are based relative to that
gotta move labels, make text boxes bigger, RSA key ones can stay small and I can expect pasting and copying from them imho
making all the entry boxes text broke everything :D, but I can now see the multiline inputs properly
I fixed it about 5min later, had some broken bits that failed silently

31/04/2025
Gotta fix all the extra newlines existing because of it now being a textbox rather than entry :sob:
will make a function for this

2/05/2025
Talked to James about changing the loginscreen that I may have changed on the 16th of April

3/05/2025
wrote in some comments at points specified to me by some classmates that they felt needed more clarification due to not understanding

5/05/2025
gonna reduce the use of global variables due to bad practice
will encrypt the creds file, probably rename it and create an obfuscated variant of the code

6/05/2025
removed global variables, now gonna make sure the program still works
Caesar broke, will fix. So did substitution, but I broke that earlier apparently.
Caesar was encrypting twice instead of having an encrypt, substitution wasn't splitting the ciphertext properly, both about 1 line fix
now that that is fixed I think I may fix up code so that I will have encryptions as their own functions, though not necessarily optimal for this scale, I do want to make this more scaleable

pulled out the trifid decrypt function, will use that as a form of template for the rest of my code

7/05/2025
watching some john hammond malware analysis and deconstruction while I think about how to obfuscate the code
maybe I wll make ts object based, will probably finish ass4 before I go and do that, and all my other assessments
time to make error function where I just throw it the message I want, and move stuff into try catch and try and cause errors, the function will take my string and display an alert box to the user
nvm that already exists as messagebox

8/05/2025
making a tool to obfuscate a trifid key, might implement random and autofilling keys similar to what I did for RSA, just using randint for caesar and shuffling my normal list for trifid and that covers my bases
actually gonna implement the encryption decryption of the creds tmrw and work on the documentation better

14/05/2025
implemented customtkinter, looks beautiful now but can still be refined
(haven't encrypted the creds file yet)

16/05/2025
keys autogenerate for caeser trifid and rsa now on encrypt
getuid button now exists and works, GUI refined for the user management section, much cleaner now

error handling implemented, possibly everything now covered, if anything else breaks, I will need to look into it
alright more error handling was implemented, should probably log generic errors instead of just catching them
moved code parcels into functions when I call it a bunch
backup file made when handling user changes to avoid accidentally breaking the entire credentials.txt list
also probably did something else, not sure, that was a lot of editing

Gonna move the encryption programs to their own file/files tomorrow
following this will finally implement a hashed version of the assessment, mostly for practice and allowing the company to view operations done in parallel with the different versions

got bored,
implemented with open to avoid crashing or other issues and reliably closing files
moved files out to their own
overall neatened up the code
